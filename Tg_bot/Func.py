import Tg_bot.Keyboard as Keyboard
from aiogram.fsm.context import FSMContext


from aiogram.types import Message
from aiogram import F
from Tg_bot.Database.Requests import get_all_admins, update_role
from Tg_bot.FSM import db_text


async def welcome (message: Message):
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name} !\n–¶–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É.\n–©–æ –± –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å?", reply_markup = Keyboard.menu)

async def group_welcome(message: Message):
    await message.answer("–í—ñ—Ç–∞—é, —è–∫–∏–º–∏ –±—É–¥—É—Ç—å –≤–∞—à—ñ –¥—ñ—ó? ",reply_markup=Keyboard.menu_bd)

async def popular_que(message: Message):
    await message.edit_text('–í–∏ –≤ –º–µ–Ω—é –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å, —â–æ –≤–∏ –± —Ö–æ—Ç—ñ–ª–∏ –∑—Ä–æ–±–∏—Ç–∏?', reply_markup= Keyboard.edit_quest_menu)

async def admin_menu_bd(message: Message):
    await message.answer('–í–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–∏ –∑–º—ñ–Ω–∏—Ç–∏ —ó–º —Ä–æ–ª—å?',reply_markup=Keyboard.bd_admin_menu)

async def admin_menu_bd_edit(message: Message):
    await message.edit_text('–í–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–∏ –∑–º—ñ–Ω–∏—Ç–∏ —ó–º —Ä–æ–ª—å?',reply_markup=Keyboard.bd_admin_menu)

async def poopular_question_edit(message: Message):
    await message.edit_text('–í–∏ –≤ –º–µ–Ω—é –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å, —â–æ –≤–∏ –± —Ö–æ—Ç—ñ–ª–∏ –∑—Ä–æ–±–∏—Ç–∏?', reply_markup= Keyboard.edit_quest_menu)    

async def get_all_admin_tabl(message: Message):
    all_tabl = await get_all_admins()
    inf =''
    for el in all_tabl:
        if el.status == '1':
            role = '–ê–¥–º—ñ–Ω üë§'
        elif el.status == '2':
            role = '–ú–µ—Ç–æ–¥–∏—Å—Ç üë®‚Äçüéì'
        elif el.status == '3':
            role = '–•–µ–ª–ø–µ—Ä üë®‚Äçüíª'
        else:
            role = '–†–æ–ª—å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
        inf+=f"{el.username}  ->  {role} \n\n"
    await message.edit_text(text=inf, reply_markup=Keyboard.back_on_menu_bd)

async def new_role (message: Message, state:FSMContext ):
    await state.set_state(db_text.txt)
    await message.edit_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º:\n\n–•–µ–ª–ø–µ—Ä - 3\n–ú–µ—Ç–æ–¥–∏—Å—Ç - 2\n–¢–µ—Ö - 1\n\n@username role(1-3)", reply_markup=Keyboard.out_role)

async def new_role_second (message: Message, state:FSMContext ):
    await state.set_state(db_text.txt)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º:\n\n–•–µ–ª–ø–µ—Ä - 3\n–ú–µ—Ç–æ–¥–∏—Å—Ç - 2\n–¢–µ—Ö - 1\n\n@username role(1-3)", reply_markup=Keyboard.out_role)


async def state_role(message: Message, state: FSMContext):   
    admins = await get_all_admins()
    current_admin = None
    data = await state.get_data()
    role_text = data.get('txt', '')
    role = role_text.split()
    await state.clear()
    for admin in admins:
        if admin.tg_id == message.from_user.id:
            current_admin = admin
            break
        else:
            await message.answer("–í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    if current_admin and current_admin.status == '1':
        if len(role) == 2:
            UserName = role[0]
            Role = role[1]
            await update_role(UserName, Role)
            await message.answer(f"–†–æ–ª—å –¥–ª—è {UserName} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {Role}")
        else:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω–Ω—ñ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
            await new_role_second(message, state)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
